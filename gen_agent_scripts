#!/bin/bash
#
# 20161104 Siegfried


# define sources
ORGAGNTSCRIPT_UBUNTU_LINUX='icinga2-agent-ubuntu.sh'
ORGAGNTSCRIPT_WIN='icinga2-agent-win.ps1'

# script config
OUTPUTDIR="${0##*/}.out"
PARENTZONE='master'
ENDPOINTS='myicingaserver'
CASERVER='myicingaserver'
TAB='    '
script_name=${0##*/}


if [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "-?" ] || [ "$1" == "--help" ] ; then
  echo
  echo "${0##*/} hostlist"
  echo "prog | ${0##*/}"
  echo
  echo "Options"
  echo "-     read from stdin"
  echo "list  read list"
  echo
  exit 0
fi


if [ "$1" == "-" ] ; then
  declare -i is_term=0
  shift
elif ! [ -t 0 ] ; then
  declare -i is_term=0
else
  declare -i is_term=1
fi

list=$1


if [ $is_term -gt 0 ] ; then
  if [ -z $list ] ; then
    echo "${script_name}: file with hostlist is needed" 1>&2
    echo "${script_name}: hostlist" 1>&2
    exit 1
  fi
fi


if ! [ -r ${ORGAGNTSCRIPT} ] ; then
  echo "${script_name}: Powershell Script ${ORGAGNTSCRIPT} is not readable" 1>&2
  exit 1
fi


if ! [ -z $list ]; then
  if ! [ -r $list ] ; then
    echo "${script_name}: file $list is not readable"
    exit 1
  fi
fi


declare -i output_dir_ready=0


function prep_output_dir() {
  local -i error_exit=0

  if [ -d ${OUTPUTDIR} ] ; then
    rm -rf ${OUTPUTDIR}
    if [ $? -gt 0 ] ; then
      (( error_exit++ )) 
    fi
  fi

  if [ ! -d ${OUTPUTDIR} ] ; then
    mkdir -pv ${OUTPUTDIR}
    if [ $? -gt 0 ] ; then
      (( error_exit++ )) 
    fi
  fi

  return $error_exit
}


function prep_output_dir_error_exit() {
  echo "${script_name}: preparation of $OUTPUTDIR failed" 1>&2
  exit 1
}


function print_out_win() {
   y=$1
   z=$2

   output_file=${OUTPUTDIR}/Icinga2Agent-${y}.psm1

   echo "${script_name}: write file $output_file"

   cp $ORGAGNTSCRIPT $output_file

   exec 3>&1
   exec 1>> $output_file

   echo
   echo '$icinga = Icinga2AgentModule `'
   echo "${TAB}-AgentName" \'$y\' '`'
   echo "${TAB}-Ticket"  \'$z\' '`'
   echo "${TAB}-ParentZone" \'$PARENTZONE\' '`'
   echo "${TAB}-ParentEndpoints" \'$ENDPOINTS\' '`'
   echo "${TAB}-CAServer" \'$CASERVER\'
   echo 
   echo '$icinga.installIcinga2Agent() '

   exec 1>&3-
}


function print_out_linux() {
   y=$1
   z=$2

   output_file=${OUTPUTDIR}/Icinga2Agent-${y}.sh

   echo "${script_name}: write file $output_file"

   cp $ORGAGNTSCRIPT $output_file

   exec 3>&1
   exec 1>> $output_file

   echo
   echo "${TAB}AgentName=${y}"
   echo "${TAB}Ticket=${z}"
   echo "${TAB}ParentZone=${PARENTZONE}"
   echo "${TAB}ParentEndpoints=${ENDPOINTS}"
   echo "${TAB}CAServer=${CASERVER}"
   echo 
   echo set_zone_conf
   echo set_api.conf
   echo create_pki_setup

   exec 1>&3-
}


function print_out() {

  agent_name=$1
  host_type=$2

  if [ "$host_type" == "ubuntulinux" ] ; then
    ORGAGNTSCRIPT=$ORGAGNTSCRIPT_UBUNTU_LINUX
    print_out_linux $agent_name $( icinga2 pki ticket --cn $agent_name )
  elif [ "$host_type" == "win" ] ; then
    ORGAGNTSCRIPT=$ORGAGNTSCRIPT_WIN
    print_out_win $agent_name $( icinga2 pki ticket --cn $agent_name )
  else
    echo "hosttype $host_type is not defined, skip"
  fi
}


declare -i host_count=0

if [ $is_term -lt 1 ] ; then
  while read aa ; do
    set -- $aa
    if [ $# -lt 2 ] ; then
      "to few arguments, skip line"
      continue
    fi
    # while [ $# -gt 0 ] ; do
    if [ $output_dir_ready -lt 1 ] ; then
      prep_output_dir
      if [ $? -gt 0 ] ; then
        prep_output_dir_error_exit
      else
        (( output_dir_ready++ ))
      fi
    fi          
      # print_out $1 $( echo $1 | md5sum )
      # change me
    print_out $1 $2
    (( host_count++ ))
    #   shift
    # done
  done < /dev/fd/0
fi


if ! [ -z $list ] ; then
  while read aa ; do
    # echo "x1x $aa"
    set -- $aa
    # echo "x3x"
    if [ -n "$aa" ] && [ "${1/\#/}" == "$1" ] ; then
      if [ $# -lt 2 ] ; then
        echo "to few arguments, skip line"
        continue
      fi
      # echo "x2x"
      if [ $output_dir_ready -lt 1 ] ; then
        prep_output_dir
        if [ $? -gt 0 ] ; then
          prep_output_dir_error_exit
        else
          (( output_dir_ready++ ))
        fi
      fi          
      # print_out $aa $( echo $aa | md5sum )
      # change me
      print_out $1 $2
      (( host_count++ ))
    fi
  done < $list
fi


echo "${script_name}: $host_count config scripts written to ${OUTPUTDIR}"


